swagger: '2.0'
info:
  description: >-
    Este é um exemplo de utilização da API Pessoa
    [http://localhost:8080/webapp-vraptor-jwt/api](http://localhost:8080/webapp-vraptor-jwt/api).
    Para este exemplo, você pode utilizar a api key `special-key` para testar os
    filtros de autorização.
  version: 1.0.0
  title: Pessoa-API
  contact:
    email: ricardosobjak@utfpr.edu.br
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8080'
basePath: /v2
tags:
  - name: pessoa
    description: Tudo sobre as Pessoas
schemes:
  - http
paths:
  /pessoa:
    post:
      tags:
        - pessoa
      summary: Adiciona uma nova Pessoa na API
      description: ''
      operationId: save
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pessoa'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - pessoa
      summary: Atualizar uma pessoa existente
      description: ''
      operationId: update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pessoa'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    get:
      tags:
        - pessoa
      summary: Obter a listagem de todas as Pessoas
      description: Multiple status values can be provided with comma separated strings
      operationId: todosJson
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
'/pessoa/{id}':
  delete:
    tags:
      - pessoa
    summary: Deletes a pet
    description: ''
    operationId: deletePet
    produces:
      - application/xml
      - application/json
    parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: id
        in: path
        description: ID da Pessoa para excluir
        required: true
        type: integer
        format: int64
    responses:
      '400':
        description: Invalid ID supplied
      '404':
        description: Pessoa não encontrada
  post:
    tags:
      - pessoa
    summary: uploads an image
    description: ''
    operationId: uploadFile
    consumes:
      - multipart/form-data
    produces:
      - application/json
    parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
    responses:
      '200':
        description: successful operation
        schema:
          $ref: '#/definitions/ApiResponse'
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pessoa': modify pets in your account
      'read:pessoa': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Pessoa:
    type: object
    required:
      - nome
      - dataNascimento
    properties:
      id:
        type: integer
        format: int64
      nome:
        type: string
        example: Fulano
      dataNascimento:
        type: string
        format: date-time
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
